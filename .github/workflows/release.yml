name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Update version in files
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Update setup.py
          sed -i "s/version=\".*\"/version=\"${VERSION}\"/" setup.py

          # Update pyproject.toml
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml

      - name: Build Python package
        run: |
          python -m build

      - name: Build Docker images with version tags
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          docker compose build

          # Tag images with version
          docker tag graph-mesh/orchestrator:latest graph-mesh/orchestrator:${VERSION}
          docker tag graph-mesh/logmap:latest graph-mesh/logmap:${VERSION}
          docker tag graph-mesh/aml:latest graph-mesh/aml:${VERSION}
          docker tag graph-mesh/bertmap:latest graph-mesh/bertmap:${VERSION}
          docker tag graph-mesh/ontmalizer:latest graph-mesh/ontmalizer:${VERSION}

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          cat > RELEASE_NOTES.md << 'EOF'
          # Graph-Mesh Release ${{ steps.version.outputs.version }}

          ## What's New

          This release includes:
          - Enhanced ontology alignment pipeline
          - Improved Docker containerization
          - Comprehensive testing infrastructure
          - Full documentation

          ## Components

          - **Orchestrator**: Main pipeline coordinator
          - **Matchers**: LogMap, AML, BERTMap ontology matchers
          - **Ontmalizer**: XSD to OWL conversion
          - **Python Package**: Core libraries and utilities

          ## Installation

          ### Using pip:
          ```bash
          pip install graph-mesh==${{ steps.version.outputs.version }}
          ```

          ### Using Docker:
          ```bash
          docker pull graph-mesh/orchestrator:${{ steps.version.outputs.version }}
          ```

          ## Documentation

          Full documentation available at: https://github.com/epieczko/graph-mesh

          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            dist/*

      - name: Save Docker images as artifacts
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          mkdir -p docker-images

          docker save graph-mesh/orchestrator:${VERSION} | gzip > docker-images/orchestrator-${VERSION}.tar.gz
          docker save graph-mesh/logmap:${VERSION} | gzip > docker-images/logmap-${VERSION}.tar.gz
          docker save graph-mesh/aml:${VERSION} | gzip > docker-images/aml-${VERSION}.tar.gz
          docker save graph-mesh/bertmap:${VERSION} | gzip > docker-images/bertmap-${VERSION}.tar.gz
          docker save graph-mesh/ontmalizer:${VERSION} | gzip > docker-images/ontmalizer-${VERSION}.tar.gz

      - name: Upload Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-${{ steps.version.outputs.version }}
          path: docker-images/*.tar.gz
          retention-days: 90
