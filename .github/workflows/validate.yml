name: OWL Validation

on:
  push:
    branches: [ main, develop, "claude/**" ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  validate-owl:
    name: Validate OWL Ontologies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Install OWL validation tools
        run: |
          # Install RDFLib and OWL validation dependencies
          pip install rdflib owlrl pyshacl

      - name: Create validation script
        run: |
          cat > validate_owl.py << 'EOF'
          #!/usr/bin/env python3
          """
          OWL Validation Script
          Validates OWL ontologies for syntax and consistency.
          """
          import sys
          from pathlib import Path
          from rdflib import Graph
          import owlrl

          def validate_owl_file(owl_path: Path) -> bool:
              """Validate an OWL file for syntax and basic consistency."""
              print(f"Validating: {owl_path}")

              try:
                  # Parse the OWL file
                  graph = Graph()
                  graph.parse(str(owl_path), format="turtle")
                  print(f"  ✓ Syntax valid ({len(graph)} triples)")

                  # Apply OWL RL reasoning
                  owlrl.DeductiveClosure(owlrl.OWLRL_Semantics).expand(graph)
                  print(f"  ✓ OWL RL reasoning complete ({len(graph)} triples after inference)")

                  return True
              except Exception as e:
                  print(f"  ✗ Validation failed: {e}")
                  return False

          def main():
              """Validate all OWL files in artifacts directory."""
              artifacts_dir = Path("artifacts")

              if not artifacts_dir.exists():
                  print("No artifacts directory found, generating test ontology...")
                  artifacts_dir.mkdir(exist_ok=True)

                  # Generate meta-ontology for testing
                  from graph_mesh_core.meta_ontology import serialize_meta_graph
                  meta_path = artifacts_dir / "meta_ontology.ttl"
                  serialize_meta_graph(str(meta_path))

              owl_files = list(artifacts_dir.glob("*.ttl")) + list(artifacts_dir.glob("*.owl"))

              if not owl_files:
                  print("No OWL/Turtle files found to validate")
                  return 0

              print(f"\nFound {len(owl_files)} file(s) to validate\n")

              results = []
              for owl_file in owl_files:
                  results.append(validate_owl_file(owl_file))

              print(f"\n{'='*60}")
              print(f"Validation Summary: {sum(results)}/{len(results)} passed")
              print(f"{'='*60}")

              return 0 if all(results) else 1

          if __name__ == "__main__":
              sys.exit(main())
          EOF
          chmod +x validate_owl.py

      - name: Run OWL validation
        run: |
          python validate_owl.py

      - name: Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owl-validation-report
          path: artifacts/
